// Define plugin versions here, but only apply them where we need to
plugins {
    id 'java'
    id 'org.springframework.boot' version '2.0.3.RELEASE' apply false
    id 'io.spring.dependency-management' version '1.0.6.RELEASE' apply false
    id 'com.google.cloud.tools.jib' version '3.2.1' apply false
    id 'maven-publish'
    id 'net.researchgate.release' version '2.8.1' // latest adequate version
}

// Preset for release plugin for manual build & testing. \n
// e.g. to test on custom branch 'feature/foo' and new version '0.0.0.1-SNAPSHOT', \n
// need to run "gradle release -Prelease.git.requireBranch=feature/foo -Prelease.newVersion=0.0.0.1-SNAPSHOT"
if(project.hasProperty('release.git.requireBranch') && project.release.git.requireBranch) {
    release.git.requireBranch = project.release.git.requireBranch
}
if(project.hasProperty('release.newVersion') && project.release.newVersion) {
    release.newVersion = project.getProperty('release.newVersion')
}

// Lifecycle tasks - BEGIN

// Task to do mavenPublish for all modules where useMavenPublish exists.
task publishMavenArtifacts {
    subprojects {
        project -> project.afterEvaluate {
            if (project.ext.has('useMavenPublish')) {
                dependsOn("${project.name}:publish")
            }
        }
    }
}

// Task to do jibImagePublish for all modules where useJib exists.
task publishJibImages {
    subprojects {
        project -> project.afterEvaluate {
            if (project.ext.has('useJib')) {
                dependsOn("${project.name}:jib")
            }
        }
    }
}

// Chains tasks as: build -> publishMavenArtifacts -> publishJibImages -> "create tag & update version"
afterReleaseBuild.dependsOn publishJibImages
publishJibImages.dependsOn publishMavenArtifacts

// Lifecycle tasks - END